<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<!-- <parent> <artifactId>features</artifactId> <groupId>org.apache.servicemix.features</groupId> 
		<version>4.2.0-fuse-02-00</version> </parent> -->

	<groupId>com.fusesource.examples</groupId>
	<artifactId>camel-mq-osgi</artifactId>
	<packaging>bundle</packaging>
	<version>1.1</version>

	<name>CSI Use-Case: Simple Websphere MQ Router Example version 3</name>
	<url>http://fusesource.com</url>


	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<version.compiler.plugin>2.3.1</version.compiler.plugin>
		<skipTests>true</skipTests>
		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.6</maven.compiler.target>
		<maven.compiler.source>1.6</maven.compiler.source>
		<version.maven-surefire-plugin>2.15</version.maven-surefire-plugin>
		<version.maven-bundle-plugin>2.3.4</version.maven-bundle-plugin>
		<!-- the version of the JBoss Fuse BOM, defining all the dependency versions -->
		<jboss.fuse.bom.version>6.1.0.redhat-379</jboss.fuse.bom.version>
		<!-- jboss.fuse.bom.version>6.2.0.redhat-114</jboss.fuse.bom.version -->
		<cxf-version-range>[2.7,3)</cxf-version-range>
		<fabric8.parentProfiles>mq-default</fabric8.parentProfiles>
		<fabric8.profile>camel-mqm</fabric8.profile>
		<fabric8.features>camel-http camel-jetty camel-jms camel-spring
			camel-core camel-test camel-blueprint</fabric8.features>
		<fabric8.bundles>file:/home/mike/Downloads/OSGi/com.ibm.mq.osgi.directip_7.1.0.6.jar file:/home/mike/Downloads/OSGi/com.ibm.mq.osgi.java_7.1.0.6.jar file:/home/mike/Downloads/OSGi/com.ibm.msg.client.osgi.jms.prereq_7.1.0.6.jar file:/home/mike/Downloads/OSGi/com.ibm.msg.client.osgi.jms_7.1.0.6.jar file:/home/mike/Downloads/OSGi/com.ibm.msg.client.osgi.commonservices.j2se_7.1.0.6.jar file:/home/mike/Downloads/OSGi/com.ibm.msg.client.osgi.nls_7.1.0.6.jar file:/home/mike/Downloads/OSGi/com.ibm.msg.client.osgi.wmq_7.1.0.6.jar file:/home/mike/Downloads/OSGi/com.ibm.msg.client.osgi.wmq.prereq_7.1.0.6.jar file:/home/mike/Downloads/OSGi/com.ibm.msg.client.osgi.wmq.nls_7.1.0.6.jar</fabric8.bundles>			
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.jboss.fuse.bom</groupId>
				<artifactId>jboss-fuse-parent</artifactId>
				<version>${jboss.fuse.bom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Core Camel support -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-spring</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jms</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Add support for HTTP -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jetty</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Add support for HTTP (outgoing) -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-http</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Add support for SLF4J -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>

	</dependencies>

	<!-- repositories are actual descriptions/links to remote maven repositories 
		that we need to access to obtain our dependencies -->
	<repositories>
		<repository>
			<id>fusesource-releases</id>
			<name>FuseSource Release Repository</name>
			<url>http://repo.fusesource.com/maven2</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
	</repositories>

	<!-- pluginRepositories are actual descriptions/links to remote maven repositories 
		that we need to access to obtain our maven plugins -->
	<pluginRepositories>
		<pluginRepository>
			<id>fusesource-releases</id>
			<name>Progress FUSE Open Source Community Release Repository</name>
			<url>http://repo.fusesource.com/maven2</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
			</releases>
		</pluginRepository>
	</pluginRepositories>

	<build>
		<defaultGoal>install</defaultGoal>

		<!-- makes sure versions are replaced in the features.xml file -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>

			<!-- Configure Fabric8 deployment plugin -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-maven-plugin</artifactId>
				<!-- version>1.2.0.redhat-114</version -->
				<version>1.1.0.CR5</version>
				<configuration>
					<jolokiaUrl>http://localhost:8181/jolokia</jolokiaUrl>
					<!-- jolokiaUrl>http://fuse-eformat.rhcloud.com/jolokia</jolokiaUrl -->
				</configuration>
			</plugin>
			
			<!-- generates OSGi bundle -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<DynamicImport-Package>*</DynamicImport-Package>
					</instructions>
				</configuration>
			</plugin>

			<!-- Use JDK 1.6 language features in all projects -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.compiler.plugin}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>

			<!-- enable maven command 'mvn camel:run' -->
			<plugin>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-maven-plugin</artifactId>
				<configuration>
					<!-- the spring context file must be separate from the OSGi bundle, 
						so we provide one here -->
					<fileApplicationContextUri>src/main/resources/META-INF/spring/camel-context.xml</fileApplicationContextUri>
				</configuration>
			</plugin>

			<!-- this will install/deploy the features file alongside the project's 
				jar artifact -->
			<!-- plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-features-xml</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>target/classes/features.xml</file>
									<type>xml</type>
									<classifier>features</classifier>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin -->

			<!-- generate a unit testing report -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<includes>
						<include>**/*Test.java</include>
					</includes>
				</configuration>
			</plugin>


		</plugins>
	</build>
</project>
